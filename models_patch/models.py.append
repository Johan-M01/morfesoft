from datetime import datetime, time
from extensions import db
from flask_login import UserMixin

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(150), unique=True, nullable=False)
    password = db.Column(db.String(150), nullable=False)
    # one-to-one business
    business = db.relationship("Business", back_populates="owner", uselist=False)

class Business(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)
    name = db.Column(db.String(120), nullable=False, default="Mi negocio")
    slug = db.Column(db.String(120), unique=True, nullable=False, default="mi-negocio")
    owner = db.relationship("User", back_populates="business")
    services = db.relationship("Service", back_populates="business", cascade="all, delete-orphan")
    availability = db.relationship("Availability", back_populates="business", cascade="all, delete-orphan")
    appointments = db.relationship("Appointment", back_populates="business", cascade="all, delete-orphan")

class Service(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    business_id = db.Column(db.Integer, db.ForeignKey("business.id"), nullable=False)
    name = db.Column(db.String(120), nullable=False)
    duration_minutes = db.Column(db.Integer, nullable=False, default=30)
    deposit_cents = db.Column(db.Integer)  # opcional
    business = db.relationship("Business", back_populates="services")
    appointments = db.relationship("Appointment", back_populates="service")

class Availability(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    business_id = db.Column(db.Integer, db.ForeignKey("business.id"), nullable=False)
    day_of_week = db.Column(db.Integer, nullable=False)  # 0=Mon ... 6=Sun
    start_time = db.Column(db.Time, nullable=False)
    end_time = db.Column(db.Time, nullable=False)
    step_minutes = db.Column(db.Integer, nullable=False, default=30)
    business = db.relationship("Business", back_populates="availability")

class Appointment(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    business_id = db.Column(db.Integer, db.ForeignKey("business.id"), nullable=False)
    service_id = db.Column(db.Integer, db.ForeignKey("service.id"), nullable=False)
    customer_name = db.Column(db.String(120), nullable=False)
    customer_phone = db.Column(db.String(60))
    start_at = db.Column(db.DateTime, nullable=False)
    status = db.Column(db.String(20), nullable=False, default="confirmed")
    business = db.relationship("Business", back_populates="appointments")
    service = db.relationship("Service", back_populates="appointments")
